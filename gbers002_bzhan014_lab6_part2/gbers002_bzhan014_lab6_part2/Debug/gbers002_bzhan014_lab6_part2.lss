
gbers002_bzhan014_lab6_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800104  00800104  00000378  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009fb  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000862  00000000  00000000  00000e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b6  00000000  00000000  0000169d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049e  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002099  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c6 c0       	rjmp	.+396    	; 0x1c2 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ee       	ldi	r30, 0xE0	; 224
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	de d0       	rcall	.+444    	; 0x280 <main>
  c4:	0b c1       	rjmp	.+534    	; 0x2dc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <flagChange>:
	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
  c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
  cc:	81 11       	cpse	r24, r1
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <flagChange+0x10>
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
  d6:	08 95       	ret
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	11 f4       	brne	.+4      	; 0xe0 <flagChange+0x18>
  dc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
  e0:	08 95       	ret

000000e2 <tick>:
  e2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <state>
  e6:	88 23       	and	r24, r24
  e8:	19 f0       	breq	.+6      	; 0xf0 <tick+0xe>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	29 f0       	breq	.+10     	; 0xf8 <tick+0x16>
  ee:	13 c0       	rjmp	.+38     	; 0x116 <tick+0x34>
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
  f6:	11 c0       	rjmp	.+34     	; 0x11a <tick+0x38>
  f8:	80 b1       	in	r24, 0x00	; 0
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	28 2f       	mov	r18, r24
  fe:	21 70       	andi	r18, 0x01	; 1
 100:	80 fd       	sbrc	r24, 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <button>
 108:	21 11       	cpse	r18, r1
 10a:	01 c0       	rjmp	.+2      	; 0x10e <tick+0x2c>
 10c:	dd df       	rcall	.-70     	; 0xc8 <flagChange>
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 114:	02 c0       	rjmp	.+4      	; 0x11a <tick+0x38>
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	71 f4       	brne	.+28     	; 0x136 <tick+0x54>
 11a:	80 b1       	in	r24, 0x00	; 0
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	28 2f       	mov	r18, r24
 120:	21 70       	andi	r18, 0x01	; 1
 122:	80 fd       	sbrc	r24, 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <button>
 12a:	21 11       	cpse	r18, r1
 12c:	01 c0       	rjmp	.+2      	; 0x130 <tick+0x4e>
 12e:	cc df       	rcall	.-104    	; 0xc8 <flagChange>
 130:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <LED>
 134:	85 b9       	out	0x05, r24	; 5
 136:	08 95       	ret

00000138 <TimerOn>:
 138:	8b e0       	ldi	r24, 0x0B	; 11
 13a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 13e:	8d e7       	ldi	r24, 0x7D	; 125
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 146:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 150:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 154:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 160:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 164:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 168:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 16c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 170:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 174:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
 178:	8f b7       	in	r24, 0x3f	; 63
 17a:	80 68       	ori	r24, 0x80	; 128
 17c:	8f bf       	out	0x3f, r24	; 63
 17e:	08 95       	ret

00000180 <TimerISR>:
	//button = (~PINA & 0x01);
	//if (button == 0x01) {
		//flagChange();
	//}
	//
	if (buttonFlag == 0x00 && count == 0x00) {
 180:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 184:	81 11       	cpse	r24, r1
 186:	1c c0       	rjmp	.+56     	; 0x1c0 <TimerISR+0x40>
 188:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
 18c:	81 11       	cpse	r24, r1
 18e:	14 c0       	rjmp	.+40     	; 0x1b8 <TimerISR+0x38>
		LED = LED << 1;
 190:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <LED>
 194:	88 0f       	add	r24, r24
 196:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <LED>
		if (LED == 0x08) {
 19a:	88 30       	cpi	r24, 0x08	; 8
 19c:	89 f4       	brne	.+34     	; 0x1c0 <TimerISR+0x40>
			count = 0x01;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count>
		}
	}
	if (buttonFlag == 0x00 && count == 0x01) {
		LED = LED >> 1;
 1a4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <LED>
 1a8:	86 95       	lsr	r24
 1aa:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <LED>
		if (LED == 0x01) {
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	39 f4       	brne	.+14     	; 0x1c0 <TimerISR+0x40>
			count = 0x00;
 1b2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <count>
		}
	}
}
 1b6:	08 95       	ret
		LED = LED << 1;
		if (LED == 0x08) {
			count = 0x01;
		}
	}
	if (buttonFlag == 0x00 && count == 0x01) {
 1b8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	91 f3       	breq	.-28     	; 0x1a4 <TimerISR+0x24>
 1c0:	08 95       	ret

000001c2 <__vector_13>:
		}
	}
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	0b b6       	in	r0, 0x3b	; 59
 1ce:	0f 92       	push	r0
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 1e8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 1ec:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 1f0:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 1f4:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	a1 09       	sbc	r26, r1
 1fc:	b1 09       	sbc	r27, r1
 1fe:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 202:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 206:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 20a:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 20e:	89 2b       	or	r24, r25
 210:	8a 2b       	or	r24, r26
 212:	8b 2b       	or	r24, r27
 214:	89 f4       	brne	.+34     	; 0x238 <__vector_13+0x76>
		TimerISR(); // Call the ISR that the user uses
 216:	b4 df       	rcall	.-152    	; 0x180 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 218:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 21c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 220:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 224:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 228:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 22c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 230:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 234:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	}
}
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0b be       	out	0x3b, r0	; 59
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 25e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 262:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 266:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 26a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 26e:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <_avr_timer_cntcurr>
 272:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <_avr_timer_cntcurr+0x1>
 276:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr+0x2>
 27a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x3>
 27e:	08 95       	ret

00000280 <main>:
}


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 280:	11 b8       	out	0x01, r1	; 1
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 286:	84 b9       	out	0x04, r24	; 4
 288:	15 b8       	out	0x05, r1	; 5
	state = start;
 28a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <state>
	LED = 0x01;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <LED>
	TimerSet(300);
 294:	6c e2       	ldi	r22, 0x2C	; 44
 296:	71 e0       	ldi	r23, 0x01	; 1
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	e0 df       	rcall	.-64     	; 0x25e <TimerSet>
	TimerOn();
 29e:	4c df       	rcall	.-360    	; 0x138 <TimerOn>
 2a0:	c1 e0       	ldi	r28, 0x01	; 1
	while (1)
	{
		button = (~PINA & 0x01);
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
 2a4:	80 b1       	in	r24, 0x00	; 0
 2a6:	9c 2f       	mov	r25, r28
 2a8:	28 2f       	mov	r18, r24
 2aa:	21 70       	andi	r18, 0x01	; 1
 2ac:	80 fd       	sbrc	r24, 0
 2ae:	9d 2f       	mov	r25, r29
 2b0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <button>
 2b4:	21 11       	cpse	r18, r1
		if (button == 0x01) {
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <main+0x3a>
			flagChange();
 2b8:	07 df       	rcall	.-498    	; 0xc8 <flagChange>
 2ba:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
		}
		if (buttonFlag == 0x00) {
 2be:	81 11       	cpse	r24, r1
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <main+0x44>
			tick();
 2c2:	0f df       	rcall	.-482    	; 0xe2 <tick>
 2c4:	80 b1       	in	r24, 0x00	; 0
		}
		button = (~PINA & 0x01);
 2c6:	9c 2f       	mov	r25, r28
 2c8:	28 2f       	mov	r18, r24
 2ca:	21 70       	andi	r18, 0x01	; 1
 2cc:	80 fd       	sbrc	r24, 0
 2ce:	9d 2f       	mov	r25, r29
 2d0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <button>
		if (button == 0x01) {
 2d4:	21 11       	cpse	r18, r1
 2d6:	e6 cf       	rjmp	.-52     	; 0x2a4 <main+0x24>
			flagChange();
 2d8:	f7 de       	rcall	.-530    	; 0xc8 <flagChange>
 2da:	e4 cf       	rjmp	.-56     	; 0x2a4 <main+0x24>

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
